name: Sync Go Libraries

on:
  push:
    branches: [main]
    paths: ['libs/golang/**']
  pull_request:
    branches: [main]
    types: [closed]
    paths: ['libs/golang/**']
  workflow_dispatch:

jobs:
  sync-go-libs:
    runs-on: ubuntu-latest
    # Only run on merged PRs or direct pushes to main
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    steps:
      - name: Checkout monorepo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for proper git operations
          token: ${{ secrets.SYNC_TOKEN }}

      - name: Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Validate Token
        env:
          GITHUB_TOKEN: ${{ secrets.SYNC_TOKEN }}
        run: |
          if [ -z "$GITHUB_TOKEN" ]; then
            echo "‚ùå ERROR: SYNC_TOKEN secret is not set!"
            echo "Please add your Personal Access Token as a repository secret named 'SYNC_TOKEN'"
            exit 1
          fi
          
          # Test token validity
          echo "üîê Testing GitHub token..."
          response=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" \
            "https://api.github.com/user")
          
          if echo "$response" | grep -q '"login"'; then
            username=$(echo "$response" | grep '"login"' | cut -d'"' -f4)
            echo "‚úÖ Token is valid for user: $username"
          else
            echo "‚ùå ERROR: Invalid GitHub token!"
            echo "Response: $response"
            echo ""
            echo "Please check that your SYNC_TOKEN secret:"
            echo "1. Is a valid Personal Access Token"
            echo "2. Has 'repo' and 'admin:org' permissions"
            echo "3. Is not expired"
            exit 1
          fi

      - name: Sync Go Libraries
        env:
          GITHUB_TOKEN: ${{ secrets.SYNC_TOKEN }}
          ORG_NAME: dae-go
        run: |
          # Function to sync a single library
          sync_library() {
            local lib_name=$1
            local lib_path="libs/golang/$lib_name"
            local repo_name="$lib_name"
            local target_repo="https://x-access-token:${GITHUB_TOKEN}@github.com/${ORG_NAME}/${repo_name}.git"
            
            echo "üîÑ Syncing $lib_name..."
            
            # Check if target repo exists first
            repo_exists=$(curl -s -o /dev/null -w "%{http_code}" \
              -H "Authorization: token ${GITHUB_TOKEN}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${ORG_NAME}/${repo_name}")
            
            if [ "$repo_exists" -eq 404 ]; then
              echo "üì¶ Creating repository ${ORG_NAME}/${repo_name}..."
              create_response=$(curl -s -X POST \
                -H "Authorization: token ${GITHUB_TOKEN}" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/orgs/${ORG_NAME}/repos" \
                -d "{
                  \"name\":\"${repo_name}\",
                  \"description\":\"Go library: ${lib_name} (auto-synced from monorepo)\",
                  \"private\":false,
                  \"auto_init\":true,
                  \"gitignore_template\":\"Go\"
                }")
              
              # Check if repo creation was successful
              if echo "$create_response" | grep -q '"id"'; then
                echo "‚úÖ Repository created successfully"
                # Wait for repo to be fully initialized
                sleep 5
              else
                echo "‚ùå Failed to create repository:"
                echo "$create_response"
                
                # Check if it's a permission issue
                if echo "$create_response" | grep -q "Bad credentials"; then
                  echo ""
                  echo "üîë PERMISSION ERROR: Your token doesn't have the required permissions."
                  echo "Please ensure your SYNC_TOKEN has:"
                  echo "  - 'repo' (Full control of private repositories)"
                  echo "  - 'admin:org' (Full control of orgs and teams)"
                fi
                return 1
              fi
            elif [ "$repo_exists" -eq 200 ]; then
              echo "‚úÖ Repository already exists"
            else
              echo "‚ùå Error checking repository (HTTP $repo_exists)"
              return 1
            fi
            
            # Create a temporary directory for the target repo
            temp_dir=$(mktemp -d)
            cd "$temp_dir"
            
            # Clone the target repo (it should exist now)
            max_retries=3
            retry_count=0
            
            while [ $retry_count -lt $max_retries ]; do
              if git clone "$target_repo" . 2>/dev/null; then
                echo "‚úÖ Successfully cloned repository"
                break
              else
                retry_count=$((retry_count + 1))
                echo "‚è≥ Clone attempt $retry_count failed, retrying in 3 seconds..."
                sleep 3
                
                if [ $retry_count -eq $max_retries ]; then
                  echo "‚ùå Failed to clone repository after $max_retries attempts"
                  return 1
                fi
              fi
            done
            
            # Copy library files from monorepo
            rsync -av --delete \
              --exclude='.git' \
              "${GITHUB_WORKSPACE}/${lib_path}/" \
              ./
            
            # Create/update README if it doesn't exist
            if [ ! -f README.md ]; then
              cat > README.md << EOF
          # ${lib_name}
          
          This is a Go library extracted from the [dae-go monorepo](https://github.com/dae-go/monorepo).
          
          ## Installation
          
          \`\`\`bash
          go get github.com/${ORG_NAME}/${repo_name}
          \`\`\`
          
          ## Usage
          
          \`\`\`go
          import "github.com/${ORG_NAME}/${repo_name}"
          \`\`\`
          
          ## Development
          
          This library is automatically synced from the monorepo. Please make changes in the [main repository](https://github.com/dae-go/monorepo/tree/main/libs/go/${lib_name}).
          EOF
            fi
            
            # Validate Go module
            if [ -f "${GITHUB_WORKSPACE}/${lib_path}/go.mod" ]; then
              echo "üìÑ Found go.mod for $lib_name"
              # Update module path in go.mod to point to new repo
              cd "${GITHUB_WORKSPACE}/${lib_path}"
              module_name=$(go mod edit -print | grep "^module " | cut -d' ' -f2)
              expected_module="github.com/${ORG_NAME}/${repo_name}"
              
              if [ "$module_name" != "$expected_module" ]; then
                echo "üîß Updating module path from $module_name to $expected_module"
                cd "$temp_dir"
                go mod edit -module="$expected_module"
              fi
            else
              echo "üìù No go.mod found for $lib_name, creating one..."
              cd "$temp_dir"
              go mod init "github.com/${ORG_NAME}/${repo_name}"
            fi
            
            # Check if there are changes to commit
            if ! git diff --staged --quiet; then
              # Get the latest commit hash from the monorepo for this library
              cd "${GITHUB_WORKSPACE}"
              latest_commit=$(git log -1 --format="%H %s" -- "$lib_path")
              commit_hash=$(echo "$latest_commit" | cut -d' ' -f1)
              commit_msg=$(echo "$latest_commit" | cut -d' ' -f2-)
              
              cd "$temp_dir"
              git commit -m "Sync from monorepo: $commit_msg" -m "Source commit: $commit_hash"
              
              # Push with retry logic
              max_push_retries=3
              push_retry_count=0
              
              while [ $push_retry_count -lt $max_push_retries ]; do
                if git push origin main 2>/dev/null; then
                  echo "‚úÖ Successfully synced $lib_name"
                  break
                else
                  push_retry_count=$((push_retry_count + 1))
                  echo "‚è≥ Push attempt $push_retry_count failed, retrying in 2 seconds..."
                  sleep 2
                  
                  if [ $push_retry_count -eq $max_push_retries ]; then
                    echo "‚ùå Failed to push $lib_name after $max_push_retries attempts"
                    return 1
                  fi
                fi
              done
            else
              echo "‚ÑπÔ∏è  No changes detected for $lib_name"
            fi
            
            # Cleanup
            cd "${GITHUB_WORKSPACE}"
            rm -rf "$temp_dir"
          }
          
          # Find all Go libraries and sync them
          cd "${GITHUB_WORKSPACE}"
          if [ -d "libs/golang" ]; then
            echo "üîç Searching for Go libraries in libs/golang/..."
            lib_count=0
            success_count=0
            
            for lib_dir in libs/golang/*/; do
              if [ -d "$lib_dir" ]; then
                lib_name=$(basename "$lib_dir")
                echo ""
                echo "===================="
                echo "Processing: $lib_name"
                echo "===================="
                
                lib_count=$((lib_count + 1))
                if sync_library "$lib_name"; then
                  success_count=$((success_count + 1))
                else
                  echo "‚ùå Failed to sync $lib_name"
                fi
              fi
            done
            
            echo ""
            echo "üìä Sync Summary:"
            echo "   Total libraries: $lib_count"
            echo "   Successfully synced: $success_count"
            echo "   Failed: $((lib_count - success_count))"
            
            if [ $success_count -lt $lib_count ]; then
              exit 1
            fi
          else
            echo "‚ùå No libs/golang directory found"
            exit 1
          fi

      - name: Summary
        run: |
          echo "‚úÖ Go library sync completed successfully!"
          echo "All libraries in libs/golang/* have been synced to separate repositories in the dae-go organization"