<b>Map method</b>: new Map(<i>iterable</i>) | <b>Map method</b> that creates a new map object. |  | new Map(<i>iterable</i>) | // Create a Map<br/> const fruits = new Map([<br/>   ["apples", 500],<br/>   ["bananas", 300],<br/>   ["oranges", 200]<br/> ]);<br/> |  
<b>Map method</b>: <i>map</i>.clear() | <b>Map method</b> that removes all the elements from a map. |  | <i>map</i>.clear() | // Create a Map<br/> const fruits = new Map([<br/>   ["apples", 500],<br/>   ["bananas", 300],<br/>   ["oranges", 200]<br/> ]);<br/> <br/> // Clear fruits<br/> fruits.clear(); |  
<b>Map method</b>: <i>map</i>.delete(<i>key</i>) | <b>Map method</b> that removes a map element specified by a key. |  | <i>map</i>.delete(<i>key</i>) | // Create a Map<br/> const fruits = new Map([<br/>   ["apples", 500],<br/>   ["bananas", 300],<br/>   ["oranges", 200]<br/> ]);<br/> <br/> // Delete an Element<br/> fruits.delete("apples"); |  
<b>Map method</b>: <i>map</i>.entries() | <b>Map method</b> that returns an iterator object with the [key, value] pairs in a map. |  | <i>map</i>.entries() | // Create a Map<br/> const fruits = new Map([<br/>   ["apples", 500],<br/>   ["bananas", 300],<br/>   ["oranges", 200]<br/> ]);<br/> <br/> // List all Entries<br/> let text = "";<br/> for (const x of fruits.entries()) {<br/>   text += x;<br/> } |  
<b>Map method</b>: <i>map</i>.forEach(<i>callback</i>) | <b>Map method</b> that invokes a callback for each key/value pair in a map. |  | <i>map</i>.forEach(<i>callback</i>) | // Create a Map<br/> const fruits = new Map([<br/>   ["apples", 500],<br/>   ["bananas", 300],<br/>   ["oranges", 200]<br/> ]);<br/> <br/> // List all Entries<br/> let text = "";<br/> fruits.forEach (function(value, key) {<br/>   text += key + ' = ' + value;<br/> }) |  
<b>Map method</b>: <i>map</i>.get(<i>key</i>) | <b>Map method</b> that gets the value for a key in a map. |  | <i>map</i>.get(<i>key</i>) | // Create a Map<br/> const fruits = new Map([<br/>   ["apples", 500],<br/>   ["bananas", 300],<br/>   ["oranges", 200]<br/> ]);<br/> <br/> // Get the Value of "apples"<br/> let value = fruits.get("apples"); |  
<b>Map method</b>: Map.groupBy(<i>iterable</i>, <i>callback</i>) | <b>Map method</b> that groups object elements according to returned callback values. |  | Map.groupBy(<i>iterable</i>, <i>callback</i>) | // Create an Array<br/> const fruits = [<br/>   {name:"apples", quantity:300},<br/>   {name:"bananas", quantity:500},<br/>   {name:"oranges", quantity:200},<br/>   {name:"kiwi", quantity:150}<br/> ];<br/> <br/> // Callback function to Group Elements<br/> function myCallback({ quantity }) {<br/>   return quantity &gt; 200 ? "ok" : "low";<br/> }<br/> <br/> // Group by Quantity<br/> const result = Map.groupBy(fruits, myCallback);<br/> |  
<b>Map method</b>: <i>map</i>.has(<i>value</i>) | <b>Map method</b> that returns true if a key exists in a map. |  | <i>map</i>.has(<i>value</i>) | // Create a Map<br/> const fruits = new Map([<br/>   ["apples", 500],<br/>   ["bananas", 300],<br/>   ["oranges", 200]<br/> ]);<br/> <br/> // Does the map has apples?<br/> fruits.has("apples"); |  
<b>Map method</b>: <i>map</i>.keys() | <b>Map method</b> that returns an iterator object with the keys in a map. |  | <i>map</i>.keys() | // Create a Map<br/> const fruits = new Map([<br/>   ["apples", 500],<br/>   ["bananas", 300],<br/>   ["oranges", 200]<br/> ]);<br/> <br/> // List all Keys<br/> let text = "";<br/> for (const x of fruits.keys()) {<br/>   text += x;<br/> } |  
<b>Map method</b>: <i>map</i>.set(<i>key, value</i>) | <b>Map method</b> that sets the value for a key in a map. |  | <i>map</i>.set(<i>key, value</i>) | // Create a Map<br/> const fruits = new Map();<br/> <br/> // Set Map Values<br/> fruits.set("apples", 500);<br/> fruits.set("bananas", 300);<br/> fruits.set("oranges", 200);<br/> |  
<b>Map method</b>: <i>map</i>.size | <b>Map method</b> that returns the number of map elements. |  | <i>map</i>.size | // Create a Map<br/> const fruits = new Map([<br/>   ["apples", 500],<br/>   ["bananas", 300],<br/>   ["oranges", 200]<br/> ]);<br/> <br/> // Get the Size<br/> let x = letters.size |  
<b>Map method</b>: <i>map</i>.values() | <b>Map method</b> that returns an iterator object of the values in a map. |  | <i>map</i>.values() | // Create a Map<br/> const fruits = new Map([<br/>   ["apples", 500],<br/>   ["bananas", 300],<br/>   ["oranges", 200]<br/> ]);<br/> <br/> // List all values<br/> let text = "";<br/> for (const x of fruits.values()) {<br/>   text += x;<br/> } |  
