<b>Object name</b>: Object.assign(<i>target, source(s)</i>) | <b>Object name</b> that copies properties from a source object to a target object. |  | Object.assign(<i>target, source(s)</i>) | // Create Target Object<br/> const person1 = {<br/>   firstName: "John",<br/>   lastName: "Doe",<br/>   age: 50,<br/>   eyeColor: "blue"<br/> };<br/> <br/> // Create Source Object<br/> const person2 = {firstName: "Anne",lastName: "Smith"};<br/> <br/> // Assign Source to Target<br/> Object.assign(person1, person2); |  
<b>Object name</b>: <i>object</i>.constructor | <b>Object name</b> that returns the function that created an object's prototype. |  | <i>object</i>.constructor | const person = {<br/>   firstName: "John",<br/>   lastName: "Doe",<br/>   age: 50,<br/>   eyeColor: "blue"<br/> };<br/> <br/> let text = person.constructor;<br/> |  
<b>Object name</b>: Object.create(<i>object, properties</i>) | <b>Object name</b> that returns an object created from an existing object. |  | Object.create(<i>object, properties</i>) | // Create an Object:<br/> const person = {<br/>   firstName: "John",<br/>   lastName: "Doe"<br/> };<br/> <br/> // Create new Object<br/> const man = Object.create(person);<br/> man.firstName = "Peter";<br/> |  
<b>Object name</b>: Object.defineProperty(<i>object , property, descriptor</i>) | <b>Object name</b> that adds or changes properties. |  | Object.defineProperty(<i>object , property, descriptor</i>) | // Create an Object:<br/> const person = {<br/>   firstName: "John",<br/>   lastName: "Doe"<br/> };<br/> <br/> // Add Properties<br/> Object.defineProperties(person, {<br/>   language: {value: "en"},<br/>   year: {value: "Hello"}<br/> }); |  
<b>Object name</b>: Object.defineProperty(<i>object, property, descriptor</i>) | <b>Object name</b> that adds or changes a property. |  | Object.defineProperty(<i>object, property, descriptor</i>) | // Create an Object:<br/> const person = {<br/>   firstName: "John",<br/>   lastName: "Doe",<br/>   language: "EN"<br/> };<br/> <br/> // Add a new Property<br/> Object.defineProperty(person, "year", {value:"2008"}) |  
<b>Object name</b>: Object.values(<i>object</i>) | <b>Object name</b> that returns an array of the key/value pairs of an object. |  | Object.values(<i>object</i>) | const person = {<br/>   firstName : "John",<br/>   lastName : "Doe",<br/>   age : 50,<br/>   eyeColor : "blue"<br/> };<br/> <br/> let text = Object.entries(person); |  
<b>Object name</b>: Object.freeze(<i>object</i>) | <b>Object name</b> that prevents any changes to an object. |  | Object.freeze(<i>object</i>) | "use strict"<br/> // Create Object<br/> const person = {<br/>   firstName: "John",<br/>   lastName: "Doe",<br/>   age: 50,<br/>   eyeColor: "blue"<br/> };<br/> <br/> // Freeze Object<br/> Object.freeze(person)<br/> <br/> // This will throw an error<br/> person.age = 51; |  
<b>Object name</b>: Object.fromEntries(<i>iterable</i>) | <b>Object name</b> that returns an object created from an iterable list of key/value pairs. |  | Object.fromEntries(<i>iterable</i>) | const fruits = [<br/>   ["apples", 300],<br/>   ["pears", 900],<br/>   ["bananas", 500]<br/> ];<br/> <br/> const myObj = Object.fromEntries(fruits); |  
<b>Object name</b>: Object.getOwnPropertyDescriptor(<i>object</i>) | <b>Object name</b> that returns an array of the keys of an object. |  | Object.getOwnPropertyDescriptor(<i>object</i>) | // Create an Object<br/> const person = {<br/>   firstName: "John",<br/>   lastName: "Doe",<br/>   age: 50,<br/>   eyeColor: "blue"<br/> };<br/> <br/> // Get Properties<br/> let descriptor = Object.getOwnPropertyDescriptor(person); |  
<b>Object name</b>: Object.getOwnPropertyDescriptors(<i>object</i>) | <b>Object name</b> that returns an array of the keys of an object. |  | Object.getOwnPropertyDescriptors(<i>object</i>) | // Create an Object<br/> const person = {<br/>   firstName: "John",<br/>   lastName: "Doe",<br/>   age: 50,<br/>   eyeColor: "blue"<br/> };<br/> <br/> // Get Properties<br/> let descriptors = Object.getOwnPropertyDescriptors(person); |  
<b>Object name</b>: Object.getOwnPropertyNames(<i>object</i>) | <b>Object name</b> that returns an array of the keys of an object. |  | Object.getOwnPropertyNames(<i>object</i>) | // Create an Object<br/> const person = {<br/>   firstName: "John",<br/>   lastName: "Doe",<br/>   age: 50,<br/>   eyeColor: "blue"<br/> };<br/> <br/> // Get Properties<br/> let props = Object.getOwnPropertyNames(person); |  
<b>Object name</b>: Object.groupBy(<i>iterable</i>, <i>callback</i>) | <b>Object name</b> that groups object elements according to returned callback values. |  | Object.groupBy(<i>iterable</i>, <i>callback</i>) | // Create an Array<br/> const fruits = [<br/>   {name:"apples", quantity:300},<br/>   {name:"bananas", quantity:500},<br/>   {name:"oranges", quantity:200},<br/>   {name:"kiwi", quantity:150}<br/> ];<br/> <br/> // Callback function to Group Elements<br/> function myCallback({ quantity }) {<br/>   return quantity &gt; 200 ? "ok" : "low";<br/> }<br/> <br/> // Group by Quantity<br/> const result = Object.groupBy(fruits, myCallback);<br/> |  
<b>Object name</b>: Object.isExtensible(<i>object</i>) | <b>Object name</b> that returns true if an object is extensible. |  | Object.isExtensible(<i>object</i>) | // Create Object<br/> const person = {firstName:"John", lastName:"Doe"};<br/> <br/> // Prevent Extensions<br/> Object.preventExtensions(person);<br/> <br/> // This will return false<br/> let answer = Object.isExtensible(person); |  
<b>Object name</b>: Object.isFrozen(<i>object</i>) | <b>Object name</b> that returns true if an object is frozen. |  | Object.isFrozen(<i>object</i>) | // Create Object<br/> const person = {firstName:"John", lastName:"Doe"};<br/> <br/> // Freeze Object<br/> Object.freeze(person);<br/> <br/> // This will return true<br/> let text = Object.isFrozen(person); |  
<b>Object name</b>: Object.isSealed(<i>object</i>) | <b>Object name</b> that returns true if an object is sealed. |  | Object.isSealed(<i>object</i>) | // Create Object<br/> const person = {firstName:"John", lastName:"Doe"};<br/> <br/> // Seal Object<br/> Object.seal(person);<br/> <br/> // This will return true<br/> let answer = Object.isSealed(person); |  
<b>Object name</b>: Object.keys(<i>object</i>) | <b>Object name</b> that returns an array of the keys of an object. |  | Object.keys(<i>object</i>) | // Create an Object<br/> const person = {<br/>   firstName: "John",<br/>   lastName: "Doe",<br/>   age: 50,<br/>   eyeColor: "blue"<br/> };<br/> <br/> // Get the Keys<br/> const keys = Object.keys(person); |  
<b>Object name</b>: Object.preventExtensions(<i>object</i>) | <b>Object name</b> that prevents adding new properties to an object. |  | Object.preventExtensions(<i>object</i>) | // Create Object<br/> const person = {firstName:"John", lastName:"Doe"};<br/> <br/> // Prevent Extensions<br/> Object.preventExtensions(person);<br/> <br/> // This will throw an error<br/> person.nationality = "English"; |  
<b>Object name</b>: <em>object</em>.prototype.<em>name</em> = <em>value</em> | <b>Object name</b> that let you to add properties and methods to javascript objects. |  | <em>object</em>.prototype.<em>name</em> = <em>value</em> | function employee(name, jobtitle, born) {<br/>     this.name = name;<br/>     this.jobtitle = jobtitle;<br/>   this.born = born;<br/> }<br/> employee.prototype.salary = 2000;<br/> <br/> const fred = new employee("Fred Flintstone", "Caveman", 1970); |  
<b>Object name</b>: Object.seal(<i>object</i>) | <b>Object name</b> that prevents adding new or deleting existing object properties. |  | Object.seal(<i>object</i>) | "use strict"<br/> // Create Object<br/> const person = {<br/>   firstName: "John",<br/>   lastName: "Doe",<br/>   age: 50,<br/>   eyeColor: "blue"<br/> };<br/> <br/> // Seal Object<br/> Object.seal(person)<br/> <br/> // This will throw an error<br/> delete person.age; |  
<b>Object name</b>: <i>object</i>.toString() | <b>Object name</b> that converts an object to a string and returns the result. |  | <i>object</i>.toString() | const fruits = ["Banana", "Orange", "Apple", "Mango"];<br/> let text = fruits.toString(); |  
<b>Object name</b>: <i>object</i>.valueOf() | <b>Object name</b> that returns the primitive value of an object. |  | <i>object</i>.valueOf() | const fruits = ["Banana", "Orange", "Apple", "Mango"];<br/> const myArray = fruits.valueOf(); |  
<b>Object name</b>: Object.values(<i>object</i>) | <b>Object name</b> that returns an array of the property values of an object. |  | Object.values(<i>object</i>) | const person = {<br/>   firstName : "John",<br/>   lastName : "Doe",<br/>   age : 50,<br/>   eyeColor : "blue"<br/> };<br/> <br/> let text = Object.values(person); |  
