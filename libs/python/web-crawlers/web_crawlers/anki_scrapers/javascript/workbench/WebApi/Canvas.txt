<b>Canvas method</b>: fillrect() | <b>Canvas method</b> that draws a "filled" rectangle. |  |  | const canvas = document.getElementById("myCanvas");<br/> const ctx = canvas.getContext("2d");<br/> <br/> ctx.fillRect(20, 20, 150, 100); |  
<b>Canvas method</b>: strokerect() | <b>Canvas method</b> that draws a rectangle (with no fill). |  |  | const canvas = document.getElementById("myCanvas");<br/> const ctx = canvas.getContext("2d");<br/> <br/> ctx.strokeRect(20, 20, 150, 100); |  
<b>Canvas method</b>: clearrect() | <b>Canvas method</b> that clears specified pixels within a rectangle. |  |  | const canvas = document.getElementById("myCanvas");<br/> const ctx = canvas.getContext("2d");<br/> <br/> ctx.fillStyle = "red";<br/> ctx.fillRect(20, 20, 200, 100);<br/> ctx.clearRect(40, 40, 50, 50); |  
<b>Canvas method</b>: beginpath() | <b>Canvas method</b> that begins a new path or resets the current path. |  |  | const canvas = document.getElementById("myCanvas");<br/> const ctx = canvas.getContext("2d");<br/> ctx.strokeStyle = "green";<br/> ctx.lineWidth = 5<br/> <br/> // Begin a Path<br/> ctx.beginPath();<br/> ctx.moveTo(0, 75);<br/> ctx.lineTo(250, 75);<br/> <br/> // Draw the Path<br/> ctx.stroke();<br/> <br/> // Begin a new Path<br/> ctx.beginPath();<br/> ctx.strokeStyle = "purple";<br/> ctx.moveTo(50, 0);<br/> ctx.lineTo(150, 130); <br/> <br/> // Draw the Path<br/> ctx.stroke(); |  
<b>Canvas method</b>: closepath() | <b>Canvas method</b> that adds a line to the path from the current point to the start. |  |  | const canvas = document.getElementById("myCanvas");<br/> const ctx = canvas.getContext("2d");<br/> <br/> ctx.beginPath();<br/>ctx.moveTo(20, 20);<br/>ctx.lineTo(20, 100);<br/> ctx.lineTo(70, 100);<br/>ctx.closePath();<br/>ctx.stroke(); |  
<b>Canvas method</b>: ispointinpath() | <b>Canvas method</b> that returns true if the specified point is in the current path. |  |  | const canvas = document.getElementById("myCanvas");<br/> const ctx = canvas.getContext("2d");<br/> ctx.rect(20, 20, 150, 100);<br/> if (ctx.isPointInPath(20, 50)) {<br/>  ctx.stroke();<br/>}; |  
<b>Canvas method</b>: moveto() | <b>Canvas method</b> that moves the path to a point in the canvas (without drawing). |  |  | const canvas = document.getElementById("myCanvas");<br/> const ctx = canvas.getContext("2d");<br/> <br/> // Start a new Path<br/> ctx.beginPath();<br/> ctx.moveTo(0, 0);<br/> ctx.lineTo(300, 150);<br/> <br/> // Draw the Path<br/> ctx.stroke(); |  
<b>Canvas method</b>: lineto() | <b>Canvas method</b> that adds a line to the the path. |  |  | const canvas = document.getElementById("myCanvas");<br/> const ctx = canvas.getContext("2d");<br/> <br/> // Start a new Path<br/> ctx.beginPath();<br/> ctx.moveTo(0, 0);<br/> ctx.lineTo(300, 150);<br/> <br/> // Draw the Path<br/> ctx.stroke(); |  
<b>Canvas method</b>: fill() | <b>Canvas method</b> that fills the current path. |  |  | const canvas = document.getElementById("myCanvas");<br/> const ctx = canvas.getContext("2d");<br/> <br/> ctx.rect(20, 20, 150, 100);<br/> ctx.fillStyle = "red";<br/> ctx.fill(); |  
<b>Canvas method</b>: rect() | <b>Canvas method</b> that adds a rectangle to the path. |  |  | const canvas = document.getElementById("myCanvas");<br/> const ctx = canvas.getContext("2d");<br/> <br/> ctx.beginPath();<br/> ctx.rect(20, 20, 150, 100);<br/> ctx.stroke(); |  
<b>Canvas method</b>: stroke() | <b>Canvas method</b> that draws the current path. |  |  | const canvas = document.getElementById("myCanvas");<br/> const ctx = canvas.getContext("2d");<br/> <br/> ctx.beginPath();<br/> ctx.moveTo(20, 20);<br/> ctx.lineTo(20, 100);<br/> ctx.lineTo(70, 100);<br/> ctx.strokeStyle = "red";<br/> ctx.stroke(); |  
<b>Canvas circles and curves</b>: beziercurveto() | <b>Canvas circles and curves</b> that adds a cubic bézier curve to the path. |  |  | const canvas = document.getElementById("myCanvas");<br/> const ctx = canvas.getContext("2d");<br/> <br/>  ctx.beginPath();<br/>ctx.moveTo(20, 20);<br/>  ctx.bezierCurveTo(20, 100, 200, 100, 200, 20);<br/>ctx.stroke(); |  
<b>Canvas circles and curves</b>: arc() | <b>Canvas circles and curves</b> that adds an arc/curve (circle, or parts of a circle) to the path. |  |  | const canvas = document.getElementById("myCanvas");<br/> const ctx = canvas.getContext("2d");<br/> <br/> ctx.beginPath();<br/>ctx.arc(100, 75, 50, 0, 2 * Math.PI);<br/>ctx.stroke(); |  
<b>Canvas circles and curves</b>: arcto() | <b>Canvas circles and curves</b> that adds an arc/curve between two tangents to the path. |  |  | const canvas = document.getElementById("myCanvas");<br/> const ctx = canvas.getContext("2d");<br/> <br/> // Start a path<br/> ctx.beginPath();<br/>    ctx.moveTo(20, 20);<br/> // Create a horizontal line<br/> ctx.lineTo(100, 20);<br/> // Create an arc<br/> ctx.arcTo(150, 20, 150, 70, 50);<br/> // Create a vertical line<br/> ctx.lineTo(150, 120);<br/> <br/> // Draw the path<br/> ctx.stroke(); |  
<b>Canvas circles and curves</b>: quadraticcurveto() | <b>Canvas circles and curves</b> that adds a quadratic bézier curve to the path. |  |  | const canvas = document.getElementById("myCanvas");<br/> const ctx = canvas.getContext("2d");<br/> <br/>  ctx.beginPath();<br/>ctx.moveTo(20, 20);<br/>  ctx.quadraticCurveTo(20, 100, 200, 20);<br/>ctx.stroke(); |  
<b>Canvas method/prop</b>: direction | <b>Canvas method/prop</b> that sets or returns the direction used to draw text. |  |  | ctx.font = "24px serif";<br/> ctx.direction = "ltr";<br/> ctx.fillText("W3Schools", 150, 50);<br/> ctx.direction = "rtl";<br/> ctx.fillText("W3Schools", 150, 60); |  
<b>Canvas method/prop</b>: filltext() | <b>Canvas method/prop</b> that draws "filled" text on the canvas. |  |  | const c = document.getElementById("myCanvas");<br/> const ctx = canvas.getContext("2d");<br/> <br/> ctx.font = "20px Georgia";<br/> ctx.fillText("Hello World!", 10, 50);<br/> ctx.font = "30px Verdana";<br/> <br/> // Create gradient<br/> const gradient = ctx.createLinearGradient(0, 0, c.width, 0);<br/> gradient.addColorStop("0", "magenta");<br/> gradient.addColorStop("0.5", "blue");<br/> gradient.addColorStop("1.0", "red");<br/> <br/> // Fill with gradient<br/> ctx.fillStyle = gradient;<br/> ctx.fillText("Big smile!", 10, 90); |  
<b>Canvas method/prop</b>: font | <b>Canvas method/prop</b> that sets or returns the font properties for text content. |  |  | const canvas = document.getElementById("myCanvas");<br/> const ctx = canvas.getContext("2d");<br/> <br/>  ctx.font = "30px Arial";<br/>ctx.fillText("Hello World", 10, 50); |  
<b>Canvas method/prop</b>: measuretext() | <b>Canvas method/prop</b> that returns an object that contains the width of the specified text. |  |  | const canvas = document.getElementById("myCanvas");<br/> const ctx = canvas.getContext("2d");<br/>ctx.font = "30px Arial";<br/> let txt = "Hello World"<br/>ctx.fillText("width:" + ctx.measureText(txt).width, 10, 50)<br/>  ctx.fillText(txt, 10, 100); |  
<b>Canvas method/prop</b>: stroketext() | <b>Canvas method/prop</b> that draws text on the canvas. |  |  | const canvas = document.getElementById("myCanvas");<br/> const ctx = canvas.getContext("2d");<br/> <br/> ctx.font = "20px Georgia";<br/> ctx.strokeText("Hello World!", 10, 50);<br/> <br/> ctx.font = "30px Verdana";<br/> <br/> // Create gradient<br/> const gradient = ctx.createLinearGradient(0, 0, c.width, 0);<br/> gradient.addColorStop("0", "magenta");<br/> gradient.addColorStop("0.5", "blue");<br/> gradient.addColorStop("1.0", "red");<br/> <br/> // Fill with gradient<br/> ctx.strokeStyle = gradient;<br/> ctx.strokeText("Big smile!", 10, 90); |  
<b>Canvas method/prop</b>: textalign | <b>Canvas method/prop</b> that sets or returns the alignment for text content. |  |  | const canvas = document.getElementById("myCanvas");<br/> const ctx = canvas.getContext("2d");<br/> <br/>  // Create a red line in position 150<br/>  ctx.strokeStyle = "red";<br/>  ctx.moveTo(150, 20);<br/>  ctx.lineTo(150, 170);<br/>  ctx.stroke();<br/> <br/>  ctx.font = "15px Arial"; <br/> <br/>  // Show the different textAlign values<br/>  ctx.textAlign = "start"; <br/>  ctx.fillText("textAlign = start", 150, 60); <br/>  ctx.textAlign = "end"; <br/>  ctx.fillText("textAlign = end", 150, 80); <br/>  ctx.textAlign = "left"; <br/>  ctx.fillText("textAlign = left", 150, 100);<br/>  ctx.textAlign = "center"; <br/>  ctx.fillText("textAlign = center", 150, 120); <br/>  ctx.textAlign = "right"; <br/>  ctx.fillText("textAlign = right", 150, 140); |  
<b>Canvas method/prop</b>: textbaseline | <b>Canvas method/prop</b> that sets or returns the text baseline used when drawing text. |  |  | const canvas = document.getElementById("myCanvas");<br/> const ctx = canvas.getContext("2d");<br/> <br/>  //Draw a red line at y=100<br/>  ctx.strokeStyle = "red";<br/>  ctx.moveTo(5, 100);<br/>  ctx.lineTo(395, 100);<br/>  ctx.stroke();<br/> <br/>  ctx.font = "20px Arial"<br/> <br/>  //Place each word at y=100 with different textBaseline values<br/>  ctx.textBaseline = "top"; <br/>  ctx.fillText("Top", 5, 100); <br/>  ctx.textBaseline = "bottom"; <br/>  ctx.fillText("Bottom", 50, 100); <br/>  ctx.textBaseline = "middle"; <br/>  ctx.fillText("Middle", 120, 100); <br/>  ctx.textBaseline = "alphabetic"; <br/>  ctx.fillText("Alphabetic", 190, 100); <br/>  ctx.textBaseline = "hanging"; <br/>  ctx.fillText("Hanging", 290, 100); |  
<b>Canvas method/property</b>: addcolorstop() | <b>Canvas method/property</b> that specifies the colors and stop positions in a gradient object. |  |  | const canvas = document.getElementById('myCanvas');<br/> const ctx = canvas.getContext('2d');<br/> <br/> // Create a Gradient<br/> const grd = ctx.createLinearGradient(0, 0, 170, 0);<br/>  grd.addColorStop(0, "black");<br/>  grd.addColorStop(1, "white");<br/> <br/> // Draw a filled Rectangle<br/>  ctx.fillStyle = grd;<br/>  ctx.fillRect(20, 20, 150, 100); |  
<b>Canvas method/property</b>:      createlineargradient() | <b>Canvas method/property</b> that creates a linear gradient (to use on canvas content). |  |  | const canvas = document.getElementById("myCanvas");<br/> const ctx = canvas.getContext("2d");<br/> <br/> // Create a Gradient<br/> const grd = ctx.createLinearGradient(0, 0, 170, 0);<br/> grd.addColorStop(0, "black");<br/> grd.addColorStop(1, "white");<br/> <br/> // Draw a filled Rectangle<br/>  ctx.fillStyle = grd;<br/>  ctx.fillRect(20, 20, 150, 100); |  
<b>Canvas method/property</b>: createpattern() | <b>Canvas method/property</b> that repeats a specified element in the specified direction. |  |  | const canvas = document.getElementById("myCanvas");<br/> const ctx = canvas.getContext("2d");<br/> const img = document.getElementById("lamp");<br/> const pat = ctx.createPattern(img, "repeat");<br/>ctx.rect(0, 0, 150, 100);<br/>  ctx.fillStyle = pat;<br/>ctx.fill(); |  
<b>Canvas method/property</b>: createradialgradient() | <b>Canvas method/property</b> that creates a radial/circular gradient (to use on canvas content). |  |  | const canvas = document.getElementById("myCanvas");<br/> const ctx = canvas.getContext("2d");<br/> <br/> // Create Radial<br/> const grd = ctx.createRadialGradient(75, 50, 5, 90, 60, 100);<br/>  grd.addColorStop(0, "red");<br/>grd.addColorStop(1, "white");<br/> <br/> // Draw a filled Rectangle<br/>  ctx.fillStyle = grd;<br/>ctx.fillRect(10, 10, 150, 100); |  
<b>Canvas method/property</b>: fillstyle | <b>Canvas method/property</b> that sets or returns the color, gradient, or pattern used to fill the drawing. |  |  | const canvas = document.getElementById("myCanvas");<br/> const ctx = canvas.getContext("2d");<br/> <br/> ctx.fillStyle = "red";<br/> ctx.fillRect(20, 20, 150, 100); |  
<b>Canvas method/property</b>: linecap | <b>Canvas method/property</b> that sets or returns the style of the end caps for a line. |  |  | const canvas = document.getElementById("myCanvas");<br/> const ctx = canvas.getContext("2d");<br/> <br/> ctx.beginPath();<br/> ctx.lineCap = "round";<br/> ctx.moveTo(20, 20);<br/> ctx.lineTo(20, 200);<br/> ctx.stroke(); |  
<b>Canvas method/property</b>: linejoin | <b>Canvas method/property</b> that sets or returns the type of corner created, when two lines meet. |  |  | const canvas = document.getElementById("myCanvas");<br/> const ctx = canvas.getContext("2d");<br/> <br/> ctx.beginPath();<br/> ctx.lineJoin = "round";<br/> ctx.moveTo(20, 20);<br/> ctx.lineTo(100, 50);<br/> ctx.lineTo(20, 100);<br/> ctx.stroke(); |  
<b>Canvas method/property</b>: linewidth | <b>Canvas method/property</b> that sets or returns the current line width. |  |  | const canvas = document.getElementById("myCanvas");<br/> const ctx = canvas.getContext("2d");<br/> ctx.lineWidth = 10;<br/> <br/> // Begin a new Path<br/> ctx.beginPath();<br/> ctx.moveTo(0, 100);<br/> ctx.lineTo(200, 100);<br/> <br/> // Draw the Path<br/> ctx.stroke(); |  
<b>Canvas method/property</b>: miterlimit | <b>Canvas method/property</b> that sets or returns the maximum miter length. |  |  | const canvas = document.getElementById("myCanvas");<br/> const ctx = canvas.getContext("2d");<br/> <br/>  ctx.lineWidth = 10;<br/>ctx.lineJoin = "miter";<br/>ctx.miterLimit = 5;<br/>  ctx.moveTo(20, 20);<br/>ctx.lineTo(50, 27);<br/>  ctx.lineTo(20, 34);<br/>ctx.stroke(); |  
<b>Canvas method/property</b>: shadowblur | <b>Canvas method/property</b> that sets or returns the blur level for shadows. |  |  | const canvas = document.getElementById("myCanvas");<br/> const ctx = canvas.getContext("2d");<br/> <br/> ctx.shadowBlur = 20;<br/> ctx.shadowColor = "black";<br/>ctx.fillStyle = "red";<br/>ctx.fillRect(20, 20, 100, 80); |  
<b>Canvas method/property</b>: shadowcolor | <b>Canvas method/property</b> that sets or returns the color to use for shadows. |  |  | const canvas = document.getElementById("myCanvas");<br/> const ctx = canvas.getContext("2d");<br/> <br/> ctx.shadowBlur = 20;<br/> ctx.shadowColor = "red";<br/> ctx.fillStyle = "red";<br/>ctx.fillRect(20, 20, 100, 80); |  
<b>Canvas method/property</b>: shadowoffsetx | <b>Canvas method/property</b> that sets or returns the horizontal distance of the shadow from the shape. |  |  | const canvas = document.getElementById("myCanvas");<br/> const ctx = canvas.getContext("2d");<br/>ctx.shadowBlur = 10;<br/> <br/>  ctx.shadowOffsetX = 20;<br/>  ctx.shadowColor = "black";<br/>  ctx.fillStyle = "red";<br/>  ctx.fillRect(20, 20, 100, 80); |  
<b>Canvas method/property</b>: shadowoffsety | <b>Canvas method/property</b> that sets or returns the vertical distance of the shadow from the shape. |  |  | const canvas = document.getElementById("myCanvas");<br/> const ctx = canvas.getContext("2d");<br/>ctx.shadowBlur = 10;<br/> <br/>  ctx.shadowOffsetY = 20;<br/>  ctx.shadowColor = "black";<br/>  ctx.fillStyle = "red";<br/>  ctx.fillRect(20, 20, 100, 80); |  
<b>Canvas method/property</b>: strokestyle | <b>Canvas method/property</b> that sets or returns the color, gradient, or pattern used for strokes. |  |  | const canvas = document.getElementById("myCanvas");<br/> const ctx = canvas.getContext("2d");<br/> <br/> ctx.strokeStyle = "red";<br/> ctx.strokeRect(20, 20, 150, 100); |  
<b>Canvas method</b>: scale() | <b>Canvas method</b> that scales the current drawing bigger or smaller. |  |  | const canvas = document.getElementById("myCanvas");<br/> const ctx = canvas.getContext("2d");<br/> <br/> ctx.strokeRect(5, 5, 25, 15);<br/> ctx.scale(2, 2);<br/> ctx.strokeRect(5, 5, 25, 15); |  
<b>Canvas method</b>: rotate() | <b>Canvas method</b> that rotates the current drawing. |  |  | const canvas = document.getElementById("myCanvas");<br/> const ctx = canvas.getContext("2d");<br/> <br/> ctx.rotate(20 * Math.PI / 180);<br/> ctx.fillRect(50, 20, 100, 50); |  
<b>Canvas method</b>: translate() | <b>Canvas method</b> that remaps the (0,0) position on the canvas. |  |  | const canvas = document.getElementById("myCanvas");<br/> const ctx = canvas.getContext("2d");<br/> <br/> ctx.fillRect(10, 10, 100, 50);<br/> ctx.translate(70, 70);<br/> ctx.fillRect(10, 10, 100, 50);<br/> |  
<b>Canvas method</b>: transform() | <b>Canvas method</b> that replaces the current transformation matrix for the drawing. |  |  | const canvas = document.getElementById("myCanvas");<br/> const ctx = canvas.getContext("2d");<br/> <br/> ctx.fillStyle = "yellow";<br/> ctx.fillRect(0, 0, 250, 100)<br/> <br/> ctx.transform(1, 0.5, -0.5, 1, 30, 10);<br/> ctx.fillStyle = "red";<br/> ctx.fillRect(0, 0, 250, 100);<br/> <br/> ctx.transform(1, 0.5, -0.5, 1, 30, 10);<br/> ctx.fillStyle = "blue";<br/> ctx.fillRect(0, 0, 250, 100); |  
<b>Canvas method</b>: settransform() | <b>Canvas method</b> that resets the current transform to the identity matrix. then runs      transform(). |  |  | const canvas = document.getElementById("myCanvas");<br/> const ctx = canvas.getContext("2d");<br/> <br/> ctx.fillStyle = "yellow";<br/> ctx.fillRect(0, 0, 250, 100)<br/> <br/> ctx.setTransform(1, 0.5, -0.5, 1, 30, 10);<br/> ctx.fillStyle = "red";<br/> ctx.fillRect(0, 0, 250, 100);<br/> <br/> ctx.setTransform(1, 0.5, -0.5, 1, 30, 10);<br/> ctx.fillStyle = "blue";<br/> ctx.fillRect(0, 0, 250, 100); |  
<b>Canvas method</b>: drawimage() | <b>Canvas method</b> that draws an image, canvas, or video onto the canvas. |  |  | const canvas = document.getElementById("myCanvas");<br/> const ctx = canvas.getContext("2d");<br/> const img = document.getElementById("scream");<br/> ctx.drawImage(img, 10, 10); |  
<b>Canvas method/property</b>: createimagedata() | <b>Canvas method/property</b> that creates a new, blank imagedata object. |  |  | const canvas = document.getElementById("myCanvas");<br/> const ctx = canvas.getContext("2d");<br/> const imgData = ctx.createImageData(100, 100);<br/> <br/> for (let i = 0; i &lt; imgData.data.length; i += 4)<br/>  {<br/>  imgData.data[i+0] = 255;<br/>  imgData.data[i+1] = 0;<br/>  imgData.data[i+2] = 0;<br/>  imgData.data[i+3] = 255;<br/>  }<br/>  ctx.putImageData(imgData, 10, 10); |  
<b>Canvas method/property</b>: getimagedata() | <b>Canvas method/property</b> that returns an imagedata object that copies the pixel data for the specified      rectangle on a canvas. |  |  | const canvas = document.getElementById("myCanvas");<br/> const ctx = canvas.getContext("2d");<br/>  ctx.fillStyle = "red";<br/>  ctx.fillRect(10, 10, 50, 50);<br/> <br/>  function copy()  {<br/>     const imgData = ctx.getImageData(10, 10, 50, 50);<br/>     ctx.putImageData(imgData, 10, 70);<br/>  } |  
<b>Canvas method/property</b>: imagedata.data | <b>Canvas method/property</b> that returns an object that contains image data of a specified imagedata      object. |  |  | const c = document.getElementById("myCanvas");<br/> const ctx = c.getContext("2d");<br/> const imgData = ctx.createImageData(100, 100);<br/> <br/> for (let i = 0; i &lt; imgData.data.length; i += 4) {<br/>   imgData.data[i+0] = 255;<br/>   imgData.data[i+1] = 0;<br/>   imgData.data[i+2] = 0;<br/>   imgData.data[i+3] = 255;<br/>   }<br/>  ctx.putImageData(imgData, 10, 10); |  
<b>Canvas method/property</b>: imagedata.height | <b>Canvas method/property</b> that returns the height of an imagedata object. |  |  | let height = imgData.height; |  
<b>Canvas method/property</b>: imagedata.width | <b>Canvas method/property</b> that returns the width of an imagedata object. |  |  | let width = imgData.width; |  
<b>Canvas method/property</b>: putimagedata() | <b>Canvas method/property</b> that puts the image data (from a specified imagedata object) back onto the      canvas. |  |  | const canvas = document.getElementById("myCanvas");<br/> const ctx = canvas.getContext("2d");<br/>  ctx.fillStyle = "red";<br/>  ctx.fillRect(10, 10, 50, 50);<br/> <br/>  function copy()  {<br/>     const imgData = ctx.getImageData(10, 10, 50, 50);<br/>     ctx.putImageData(imgData, 10, 70);<br/>  } |  
<b>Canvas property</b>: globalalpha | <b>Canvas property</b> that sets or returns the current alpha or transparency value of the drawing. |  |  | const canvas = document.getElementById("myCanvas");<br/> const ctx = canvas.getContext("2d");<br/> ctx.fillStyle = "red";<br/> ctx.fillRect(20, 20, 75, 50);<br/><br/> // Turn transparency on<br/> ctx.globalAlpha = 0.2;<br/> ctx.fillStyle = "blue"; <br/> ctx.fillRect(50, 50, 75, 50); <br/> ctx.fillStyle = "green"; <br/> ctx.fillRect(80, 80, 75, 50); |  
<b>Canvas property</b>: globalcompositeoperation | <b>Canvas property</b> that sets or returns how a new image are drawn onto an existing image. |  |  | const canvas = document.getElementById("myCanvas");<br/> const ctx = canvas.getContext("2d");<br/> <br/>  ctx.fillStyle = "red";<br/>  ctx.fillRect(20, 20, 75, 50);<br/>  ctx.globalCompositeOperation = "source-over";<br/>  ctx.fillStyle = "blue"; <br/>  ctx.fillRect(50, 50, 75, 50); <br/> <br/>  ctx.fillStyle = "red";<br/>  ctx.fillRect(150, 20, 75, 50);<br/>  ctx.globalCompositeOperation = "destination-over";<br/>  ctx.fillStyle = "blue"; <br/>  ctx.fillRect(180, 50, 75, 50); |  
<b>Canvas method</b>: clip() | <b>Canvas method</b> that clips a region of any shape and size from the original canvas. |  |  | const canvas = document.getElementById("myCanvas");<br/> const ctx = canvas.getContext("2d");<br/> <br/> // Clip a rectangular area<br/> ctx.rect(50, 20, 200, 120);<br/> ctx.stroke();<br/> ctx.clip();<br/> <br/> // Draw red rectangle after clip()<br/> ctx.fillStyle = "red";<br/> ctx.fillRect(0, 0, 150, 100);<br/> &lt;/script&gt; |  
<b>Canvas method</b>: save() | <b>Canvas method</b> that saves the state of the current drawing context and all its attributes. |  |  | // Draw<br/> ctx.fillStyle = "green";<br/> ctx.fillRect(10, 10, 50, 50);<br/> <br/> // Save the state<br/> ctx.save();<br/> <br/> // Draw new<br/> ctx.fillStyle = "red";<br/> ctx.fillRect(100, 10, 50, 50);<br/> <br/> // Restore saved state<br/> ctx.restore();<br/> <br/> // Draw new<br/> ctx.fillRect(200, 10, 50, 50); |  
<b>Canvas method</b>: restore() | <b>Canvas method</b> that restores the previously saved state and attributes. |  |  | // Draw<br/> ctx.fillStyle = "green";<br/> ctx.fillRect(10, 10, 50, 50);<br/> <br/> // Save the state<br/> ctx.save();<br/> <br/> // Draw new<br/> ctx.fillStyle = "red";<br/> ctx.fillRect(100, 10, 50, 50);<br/> <br/> // Restore saved state<br/> ctx.restore();<br/> <br/> // Draw new<br/> ctx.fillRect(200, 10, 50, 50); |  
