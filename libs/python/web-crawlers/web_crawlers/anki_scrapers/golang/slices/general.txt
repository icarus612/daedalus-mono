slices.All(<i>s</i>) | <b>Slices function</b> that returns an iterator over index-value pairs in the slice in the usual order.  |  | func All[Slice ~[]E, E any](s Slice) iter.Seq2[int, E] 
slices.AppendSeq(<i>s</i>, <i>seq</i>) | <b>Slices function</b> that appends the values from seq to the slice and returns the extended slice.  |  | func AppendSeq[Slice ~[]E, E any](s Slice, seq iter.Seq[E]) Slice 
slices.Backward(<i>s</i>) | <b>Slices function</b> that returns an iterator over index-value pairs in the slice, traversing it backward with descending indices.  |  | func Backward[Slice ~[]E, E any](s Slice) iter.Seq2[int, E] 
slices.BinarySearch(<i>x</i>, <i>target</i>) | <b>Slices function</b> that searches for target in a sorted slice and returns the earliest position where target is found, or the position where target would appear in the sort order; it also returns a bool saying whether the target is really found in the slice. The slice must be sorted in increasing order.  |  | func BinarySearch[S ~[]E, E cmp.Ordered](x S, target E) (int, bool) 
slices.BinarySearchFunc(<i>x</i>, <i>target</i>, <i>cmp</i>, <i>T</i>) | <b>Slices function</b> that works like BinarySearch, but uses a custom comparison function. The slice must be sorted in increasing order, where "increasing" is defined by cmp. cmp should return 0 if the slice element matches the target, a negative number if the slice element precedes the target, or a positive number if the slice element follows the target. cmp must implement the same ordering as the slice, such that if cmp(a, t) < 0 and cmp(b, t) >= 0, then a must precede b in the slice.  |  | func BinarySearchFunc[S ~[]E, E, T any](x S, target T, cmp func(E, T) int) (int, bool) 
slices.Chunk(<i>s</i>, <i>n</i>) | <b>Slices function</b> that returns an iterator over consecutive sub-slices of up to n elements of s. All but the last sub-slice will have size n. All sub-slices are clipped to have no capacity beyond the length. If s is empty, the sequence is empty: there is no empty slice in the sequence. Chunk panics if n is less than 1.  |  | func Chunk[Slice ~[]E, E any](s Slice, n int) iter.Seq[Slice] 
slices.Clip(<i>s</i>) | <b>Slices function</b> that removes unused capacity from the slice, returning s[:len(s):len(s)].  |  | func Clip[S ~[]E, E any](s S) S 
slices.Clone(<i>s</i>) | <b>Slices function</b> that returns a copy of the slice. The elements are copied using assignment, so this is a shallow clone. The result may have additional unused capacity.  |  | func Clone[S ~[]E, E any](s S) S 
slices.Collect(<i>seq</i>) | <b>Slices function</b> that collects values from seq into a new slice and returns it.  |  | func Collect[E any](seq iter.Seq[E]) []E 
slices.Compact(<i>s</i>) | <b>Slices function</b> that replaces consecutive runs of equal elements with a single copy. This is like the uniq command found on Unix. Compact modifies the contents of the slice s and returns the modified slice, which may have a smaller length. Compact zeroes the elements between the new length and the original length.  |  | func Compact[S ~[]E, E comparable](s S) S 
slices.CompactFunc(<i>s</i>, <i>eq</i>, <i>E</i>) | <b>Slices function</b> that is like Compact but uses an equality function to compare elements. For runs of elements that compare equal, CompactFunc keeps the first one. CompactFunc zeroes the elements between the new length and the original length.  |  | func CompactFunc[S ~[]E, E any](s S, eq func(E, E) bool) S 
slices.Compare(<i>s1</i>, <i>s2</i>) | <b>Slices function</b> that compares the elements of s1 and s2, using cmp.Compare on each pair of elements. The elements are compared sequentially, starting at index 0, until one element is not equal to the other. The result of comparing the first non-matching elements is returned. If both slices are equal until one of them ends, the shorter slice is considered less than the longer one. The result is 0 if s1 == s2, -1 if s1 < s2, and +1 if s1 > s2.  |  | func Compare[S ~[]E, E cmp.Ordered](s1, s2 S) int 
slices.CompareFunc(<i>s1</i>, <i>s2</i>, <i>cmp</i>, <i>E2</i>) | <b>Slices function</b> that is like Compare but uses a custom comparison function on each pair of elements. The result is the first non-zero result of cmp; if cmp always returns 0 the result is 0 if len(s1) == len(s2), -1 if len(s1) < len(s2), and +1 if len(s1) > len(s2).  |  | func CompareFunc[S1 ~[]E1, S2 ~[]E2, E1, E2 any](s1 S1, s2 S2, cmp func(E1, E2) int) int 
slices.Concat(<i>slices</i>) | <b>Slices function</b> that returns a new slice concatenating the passed in slices.  |  | func Concat[S ~[]E, E any](slices ...S) S 
slices.Contains(<i>s</i>, <i>v</i>) | <b>Slices function</b> that reports whether v is present in s.  |  | func Contains[S ~[]E, E comparable](s S, v E) bool 
slices.ContainsFunc(<i>s</i>, <i>f</i>) | <b>Slices function</b> that reports whether at least one element e of s satisfies f(e).  |  | func ContainsFunc[S ~[]E, E any](s S, f func(E) bool) bool 
slices.Delete(<i>s</i>, <i>i</i>, <i>j</i>) | <b>Slices function</b> that removes the elements s[i:j] from s, returning the modified slice. Delete panics if j > len(s) or s[i:j] is not a valid slice of s. Delete is O(len(s)-i), so if many items must be deleted, it is better to make a single call deleting them all together than to delete one at a time. Delete zeroes the elements s[len(s)-(j-i):len(s)].  |  | func Delete[S ~[]E, E any](s S, i, j int) S 
slices.DeleteFunc(<i>s</i>, <i>del</i>) | <b>Slices function</b> that removes any elements from s for which del returns true, returning the modified slice. DeleteFunc zeroes the elements between the new length and the original length.  |  | func DeleteFunc[S ~[]E, E any](s S, del func(E) bool) S 
slices.Equal(<i>s1</i>, <i>s2</i>) | <b>Slices function</b> that reports whether two slices are equal: the same length and all elements equal. If the lengths are different, Equal returns false. Otherwise, the elements are compared in increasing index order, and the comparison stops at the first unequal pair. Empty and nil slices are considered equal. Floating point NaNs are not considered equal.  |  | func Equal[S ~[]E, E comparable](s1, s2 S) bool 
slices.EqualFunc(<i>s1</i>, <i>s2</i>, <i>eq</i>, <i>E2</i>) | <b>Slices function</b> that reports whether two slices are equal using an equality function on each pair of elements. If the lengths are different, EqualFunc returns false. Otherwise, the elements are compared in increasing index order, and the comparison stops at the first index for which eq returns false.  |  | func EqualFunc[S1 ~[]E1, S2 ~[]E2, E1, E2 any](s1 S1, s2 S2, eq func(E1, E2) bool) bool 
slices.Grow(<i>s</i>, <i>n</i>) | <b>Slices function</b> that increases the slice's capacity, if necessary, to guarantee space for another n elements. After Grow(n), at least n elements can be appended to the slice without another allocation. If n is negative or too large to allocate the memory, Grow panics.  |  | func Grow[S ~[]E, E any](s S, n int) S 
slices.Index(<i>s</i>, <i>v</i>) | <b>Slices function</b> that returns the index of the first occurrence of v in s, or -1 if not present.  |  | func Index[S ~[]E, E comparable](s S, v E) int 
slices.IndexFunc(<i>s</i>, <i>f</i>) | <b>Slices function</b> that returns the first index i satisfying f(s[i]), or -1 if none do.  |  | func IndexFunc[S ~[]E, E any](s S, f func(E) bool) int 
slices.Insert(<i>s</i>, <i>i</i>, <i>v</i>) | <b>Slices function</b> that inserts the values v... into s at index i, returning the modified slice. The elements at s[i:] are shifted up to make room. In the returned slice r, r[i] == v[0], and r[i+len(v)] == value originally at r[i]. Insert panics if i is out of range. This function is O(len(s) + len(v)).  |  | func Insert[S ~[]E, E any](s S, i int, v ...E) S 
slices.IsSorted(<i>x</i>) | <b>Slices function</b> that reports whether x is sorted in ascending order.  |  | func IsSorted[S ~[]E, E cmp.Ordered](x S) bool 
slices.IsSortedFunc(<i>x</i>, <i>cmp</i>, <i>b</i>) | <b>Slices function</b> that reports whether x is sorted in ascending order, with cmp as the comparison function as defined by SortFunc.  |  | func IsSortedFunc[S ~[]E, E any](x S, cmp func(a, b E) int) bool 
slices.Max(<i>x</i>) | <b>Slices function</b> that returns the maximal value in x. It panics if x is empty. For floating-point E, Max propagates NaNs (any NaN value in x forces the output to be NaN).  |  | func Max[S ~[]E, E cmp.Ordered](x S) E 
slices.MaxFunc(<i>x</i>, <i>cmp</i>, <i>b</i>) | <b>Slices function</b> that returns the maximal value in x, using cmp to compare elements. It panics if x is empty. If there is more than one maximal element according to the cmp function, MaxFunc returns the first one.  |  | func MaxFunc[S ~[]E, E any](x S, cmp func(a, b E) int) E 
slices.Min(<i>x</i>) | <b>Slices function</b> that returns the minimal value in x. It panics if x is empty. For floating-point numbers, Min propagates NaNs (any NaN value in x forces the output to be NaN).  |  | func Min[S ~[]E, E cmp.Ordered](x S) E 
slices.MinFunc(<i>x</i>, <i>cmp</i>, <i>b</i>) | <b>Slices function</b> that returns the minimal value in x, using cmp to compare elements. It panics if x is empty. If there is more than one minimal element according to the cmp function, MinFunc returns the first one.  |  | func MinFunc[S ~[]E, E any](x S, cmp func(a, b E) int) E 
slices.Repeat(<i>x</i>, <i>count</i>) | <b>Slices function</b> that returns a new slice that repeats the provided slice the given number of times. The result has length and capacity (len(x) * count). The result is never nil. Repeat panics if count is negative or if the result of (len(x) * count) overflows.  |  | func Repeat[S ~[]E, E any](x S, count int) S 
slices.Replace(<i>s</i>, <i>i</i>, <i>j</i>, <i>v</i>) | <b>Slices function</b> that replaces the elements s[i:j] by the given v, and returns the modified slice. Replace panics if j > len(s) or s[i:j] is not a valid slice of s. When len(v) < (j-i), Replace zeroes the elements between the new length and the original length.  |  | func Replace[S ~[]E, E any](s S, i, j int, v ...E) S 
slices.Reverse(<i>s</i>) | <b>Slices function</b> that reverses the elements of the slice in place.  |  | func Reverse[S ~[]E, E any](s S) 
slices.Sort(<i>x</i>) | <b>Slices function</b> that sorts a slice of any ordered type in ascending order. When sorting floating-point numbers, NaNs are ordered before other values.  |  | func Sort[S ~[]E, E cmp.Ordered](x S) 
slices.SortFunc(<i>x</i>, <i>cmp</i>, <i>b</i>) | <b>Slices function</b> that sorts the slice x in ascending order as determined by the cmp function. This sort is not guaranteed to be stable. cmp(a, b) should return a negative number when a < b, a positive number when a > b and zero when a == b or a and b are incomparable in the sense of a strict weak ordering.  |  | func SortFunc[S ~[]E, E any](x S, cmp func(a, b E) int) 
slices.SortStableFunc(<i>x</i>, <i>cmp</i>, <i>b</i>) | <b>Slices function</b> that sorts the slice x while keeping the original order of equal elements, using cmp to compare elements in the same way as SortFunc.  |  | func SortStableFunc[S ~[]E, E any](x S, cmp func(a, b E) int) 
slices.Sorted(<i>seq</i>) | <b>Slices function</b> that collects values from seq into a new slice, sorts the slice, and returns it.  |  | func Sorted[E cmp.Ordered](seq iter.Seq[E]) []E 
slices.SortedFunc(<i>seq</i>, <i>cmp</i>, <i>E</i>) | <b>Slices function</b> that collects values from seq into a new slice, sorts the slice using the comparison function, and returns it.  |  | func SortedFunc[E any](seq iter.Seq[E], cmp func(E, E) int) []E 
slices.SortedStableFunc(<i>seq</i>, <i>cmp</i>, <i>E</i>) | <b>Slices function</b> that collects values from seq into a new slice. It then sorts the slice while keeping the original order of equal elements, using the comparison function to compare elements. It returns the new slice.  |  | func SortedStableFunc[E any](seq iter.Seq[E], cmp func(E, E) int) []E 
slices.Values(<i>s</i>) | <b>Slices function</b> that returns an iterator that yields the slice elements in order.  |  | func Values[Slice ~[]E, E any](s Slice) iter.Seq[E] 
