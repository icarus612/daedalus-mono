<i>FlagSet</i>.Arg(<i>i</i>)|<b>Flag function</b> that returns the i'th argument. Arg(0) is the first remaining argument after flags have been processed. Arg returns an empty string if the requested element does not exist. ||func (f *FlagSet) Arg(i int) string 
<i>FlagSet</i>.Args(<i></i>)|<b>Flag function</b> that returns the non-flag arguments. ||func (f *FlagSet) Args() []string 
<i>FlagSet</i>.Bool(<i>name</i>, <i>value</i>, <i>usage</i>)|<b>Flag function</b> that defines a bool flag with specified name, default value, and usage string. The return value is the address of a bool variable that stores the value of the flag. ||func (f *FlagSet) Bool(name string, value bool, usage string) *bool 
<i>FlagSet</i>.BoolFunc(<i>name</i>, <i>usage</i>, <i>fn</i>)|<b>Flag function</b> that defines a flag with the specified name and usage string without requiring values. Each time the flag is seen, fn is called with the value of the flag. If fn returns a non-nil error, it will be treated as a flag value parsing error. ||func (f *FlagSet) BoolFunc(name, usage string, fn func(string) error) 
<i>FlagSet</i>.BoolVar(<i>p</i>, <i>name</i>, <i>value</i>, <i>usage</i>)|<b>Flag function</b> that defines a bool flag with specified name, default value, and usage string. The argument p points to a bool variable in which to store the value of the flag. ||func (f *FlagSet) BoolVar(p *bool, name string, value bool, usage string) 
<i>FlagSet</i>.Duration(<i>name</i>, <i>value</i>, <i>usage</i>)|<b>Flag function</b> that defines a time.Duration flag with specified name, default value, and usage string. The return value is the address of a time.Duration variable that stores the value of the flag. The flag accepts a value acceptable to time.ParseDuration. ||func (f *FlagSet) Duration(name string, value time.Duration, usage string) *time.Duration 
<i>FlagSet</i>.DurationVar(<i>p</i>, <i>name</i>, <i>value</i>, <i>usage</i>)|<b>Flag function</b> that defines a time.Duration flag with specified name, default value, and usage string. The argument p points to a time.Duration variable in which to store the value of the flag. The flag accepts a value acceptable to time.ParseDuration. ||func (f *FlagSet) DurationVar(p *time.Duration, name string, value time.Duration, usage string) 
<i>FlagSet</i>.ErrorHandling(<i></i>)|<b>Flag function</b> that returns the error handling behavior of the flag set. ||func (f *FlagSet) ErrorHandling() ErrorHandling 
<i>FlagSet</i>.Float64(<i>name</i>, <i>value</i>, <i>usage</i>)|<b>Flag function</b> that defines a float64 flag with specified name, default value, and usage string. The return value is the address of a float64 variable that stores the value of the flag. ||func (f *FlagSet) Float64(name string, value float64, usage string) *float64 
<i>FlagSet</i>.Float64Var(<i>p</i>, <i>name</i>, <i>value</i>, <i>usage</i>)|<b>Flag function</b> that defines a float64 flag with specified name, default value, and usage string. The argument p points to a float64 variable in which to store the value of the flag. ||func (f *FlagSet) Float64Var(p *float64, name string, value float64, usage string) 
<i>FlagSet</i>.Func(<i>name</i>, <i>usage</i>, <i>fn</i>)|<b>Flag function</b> that defines a flag with the specified name and usage string. Each time the flag is seen, fn is called with the value of the flag. If fn returns a non-nil error, it will be treated as a flag value parsing error. ||func (f *FlagSet) Func(name, usage string, fn func(string) error) 
<i>FlagSet</i>.Init(<i>name</i>, <i>errorHandling</i>)|<b>Flag function</b> that sets the name and error handling property for a flag set. By default, the zero FlagSet uses an empty name and the ContinueOnError error handling policy. ||func (f *FlagSet) Init(name string, errorHandling ErrorHandling) 
<i>FlagSet</i>.Int(<i>name</i>, <i>value</i>, <i>usage</i>)|<b>Flag function</b> that defines an int flag with specified name, default value, and usage string. The return value is the address of an int variable that stores the value of the flag. ||func (f *FlagSet) Int(name string, value int, usage string) *int 
<i>FlagSet</i>.Int64(<i>name</i>, <i>value</i>, <i>usage</i>)|<b>Flag function</b> that defines an int64 flag with specified name, default value, and usage string. The return value is the address of an int64 variable that stores the value of the flag. ||func (f *FlagSet) Int64(name string, value int64, usage string) *int64 
<i>FlagSet</i>.Int64Var(<i>p</i>, <i>name</i>, <i>value</i>, <i>usage</i>)|<b>Flag function</b> that defines an int64 flag with specified name, default value, and usage string. The argument p points to an int64 variable in which to store the value of the flag. ||func (f *FlagSet) Int64Var(p *int64, name string, value int64, usage string) 
<i>FlagSet</i>.IntVar(<i>p</i>, <i>name</i>, <i>value</i>, <i>usage</i>)|<b>Flag function</b> that defines an int flag with specified name, default value, and usage string. The argument p points to an int variable in which to store the value of the flag. ||func (f *FlagSet) IntVar(p *int, name string, value int, usage string) 
<i>FlagSet</i>.Lookup(<i>name</i>)|<b>Flag function</b> that returns the Flag structure of the named flag, returning nil if none exists. ||func (f *FlagSet) Lookup(name string) *Flag 
<i>FlagSet</i>.NArg(<i></i>)|<b>Flag function</b> that is the number of arguments remaining after flags have been processed. ||func (f *FlagSet) NArg() int 
<i>FlagSet</i>.NFlag(<i></i>)|<b>Flag function</b> that returns the number of flags that have been set. ||func (f *FlagSet) NFlag() int 
<i>FlagSet</i>.Name(<i></i>)|<b>Flag function</b> that returns the name of the flag set. ||func (f *FlagSet) Name() string 
<i>FlagSet</i>.Output(<i></i>)|<b>Flag function</b> that returns the destination for usage and error messages. os.Stderr is returned if output was not set or was set to nil. ||func (f *FlagSet) Output() io.Writer 
<i>FlagSet</i>.Parse(<i>arguments</i>)|<b>Flag function</b> that parses flag definitions from the argument list, which should not include the command name. Must be called after all flags in the FlagSet are defined and before flags are accessed by the program. The return value will be ErrHelp if -help or -h were set but not defined. ||func (f *FlagSet) Parse(arguments []string) error 
<i>FlagSet</i>.Parsed(<i></i>)|<b>Flag function</b> that reports whether f.Parse has been called. ||func (f *FlagSet) Parsed() bool 
<i>FlagSet</i>.PrintDefaults(<i></i>)|<b>Flag function</b> that prints, to standard error unless configured otherwise, the default values of all defined command-line flags in the set. See the documentation for the global function PrintDefaults for more information. ||func (f *FlagSet) PrintDefaults() 
<i>FlagSet</i>.Set(<i>name</i>, <i>value</i>)|<b>Flag function</b> that sets the value of the named flag. ||func (f *FlagSet) Set(name, value string) error 
<i>FlagSet</i>.SetOutput(<i>output</i>)|<b>Flag function</b> that sets the destination for usage and error messages. If output is nil, os.Stderr is used. ||func (f *FlagSet) SetOutput(output io.Writer) 
<i>FlagSet</i>.String(<i>name</i>, <i>value</i>, <i>usage</i>)|<b>Flag function</b> that defines a string flag with specified name, default value, and usage string. The return value is the address of a string variable that stores the value of the flag. ||func (f *FlagSet) String(name string, value string, usage string) *string 
<i>FlagSet</i>.StringVar(<i>p</i>, <i>name</i>, <i>value</i>, <i>usage</i>)|<b>Flag function</b> that defines a string flag with specified name, default value, and usage string. The argument p points to a string variable in which to store the value of the flag. ||func (f *FlagSet) StringVar(p *string, name string, value string, usage string) 
<i>FlagSet</i>.TextVar(<i>p</i>, <i>name</i>, <i>value</i>, <i>usage</i>)|<b>Flag function</b> that defines a flag with a specified name, default value, and usage string. The argument p must be a pointer to a variable that will hold the value of the flag, and p must implement encoding.TextUnmarshaler. If the flag is used, the flag value will be passed to p's UnmarshalText method. The type of the default value must be the same as the type of p. ||func (f *FlagSet) TextVar(p encoding.TextUnmarshaler, name string, value encoding.TextMarshaler, usage string) 
<i>FlagSet</i>.Uint(<i>name</i>, <i>value</i>, <i>usage</i>)|<b>Flag function</b> that defines a uint flag with specified name, default value, and usage string. The return value is the address of a uint variable that stores the value of the flag. ||func (f *FlagSet) Uint(name string, value uint, usage string) *uint 
<i>FlagSet</i>.Uint64(<i>name</i>, <i>value</i>, <i>usage</i>)|<b>Flag function</b> that defines a uint64 flag with specified name, default value, and usage string. The return value is the address of a uint64 variable that stores the value of the flag. ||func (f *FlagSet) Uint64(name string, value uint64, usage string) *uint64 
<i>FlagSet</i>.Uint64Var(<i>p</i>, <i>name</i>, <i>value</i>, <i>usage</i>)|<b>Flag function</b> that defines a uint64 flag with specified name, default value, and usage string. The argument p points to a uint64 variable in which to store the value of the flag. ||func (f *FlagSet) Uint64Var(p *uint64, name string, value uint64, usage string) 
<i>FlagSet</i>.UintVar(<i>p</i>, <i>name</i>, <i>value</i>, <i>usage</i>)|<b>Flag function</b> that defines a uint flag with specified name, default value, and usage string. The argument p points to a uint variable in which to store the value of the flag. ||func (f *FlagSet) UintVar(p *uint, name string, value uint, usage string) 
<i>FlagSet</i>.Var(<i>value</i>, <i>name</i>, <i>usage</i>)|<b>Flag function</b> that defines a flag with the specified name and usage string. The type and value of the flag are represented by the first argument, of type Value, which typically holds a user-defined implementation of Value. For instance, the caller could create a flag that turns a comma-separated string into a slice of strings by giving the slice the methods of Value; in particular, Set would decompose the comma-separated string into the slice. ||func (f *FlagSet) Var(value Value, name string, usage string) 
<i>FlagSet</i>.Visit(<i>fn</i>)|<b>Flag function</b> that visits the flags in lexicographical order, calling fn for each. It visits only those flags that have been set. ||func (f *FlagSet) Visit(fn func(*Flag)) 
<i>FlagSet</i>.VisitAll(<i>fn</i>)|<b>Flag function</b> that visits the flags in lexicographical order, calling fn for each. It visits all flags, even those not set. ||func (f *FlagSet) VisitAll(fn func(*Flag)) 
