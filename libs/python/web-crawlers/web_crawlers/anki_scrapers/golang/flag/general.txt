flag.Arg(<i>i</i>)|<b>Flag function</b> that returns the i'th command-line argument. Arg(0) is the first remaining argument after flags have been processed. Arg returns an empty string if the requested element does not exist. ||func Arg(i int) string 
flag.Args(<i></i>)|<b>Flag function</b> that returns the non-flag command-line arguments. ||func Args() []string 
flag.Bool(<i>name</i>, <i>value</i>, <i>usage</i>)|<b>Flag function</b> that defines a bool flag with specified name, default value, and usage string. The return value is the address of a bool variable that stores the value of the flag. ||func Bool(name string, value bool, usage string) *bool 
flag.BoolFunc(<i>name</i>, <i>usage</i>, <i>fn</i>)|<b>Flag function</b> that defines a flag with the specified name and usage string without requiring values. Each time the flag is seen, fn is called with the value of the flag. If fn returns a non-nil error, it will be treated as a flag value parsing error. ||func BoolFunc(name, usage string, fn func(string) error) 
flag.BoolVar(<i>p</i>, <i>name</i>, <i>value</i>, <i>usage</i>)|<b>Flag function</b> that defines a bool flag with specified name, default value, and usage string. The argument p points to a bool variable in which to store the value of the flag. ||func BoolVar(p *bool, name string, value bool, usage string) 
flag.Duration(<i>name</i>, <i>value</i>, <i>usage</i>)|<b>Flag function</b> that defines a time.Duration flag with specified name, default value, and usage string. The return value is the address of a time.Duration variable that stores the value of the flag. The flag accepts a value acceptable to time.ParseDuration. ||func Duration(name string, value time.Duration, usage string) *time.Duration 
flag.DurationVar(<i>p</i>, <i>name</i>, <i>value</i>, <i>usage</i>)|<b>Flag function</b> that defines a time.Duration flag with specified name, default value, and usage string. The argument p points to a time.Duration variable in which to store the value of the flag. The flag accepts a value acceptable to time.ParseDuration. ||func DurationVar(p *time.Duration, name string, value time.Duration, usage string) 
flag.Float64(<i>name</i>, <i>value</i>, <i>usage</i>)|<b>Flag function</b> that defines a float64 flag with specified name, default value, and usage string. The return value is the address of a float64 variable that stores the value of the flag. ||func Float64(name string, value float64, usage string) *float64 
flag.Float64Var(<i>p</i>, <i>name</i>, <i>value</i>, <i>usage</i>)|<b>Flag function</b> that defines a float64 flag with specified name, default value, and usage string. The argument p points to a float64 variable in which to store the value of the flag. ||func Float64Var(p *float64, name string, value float64, usage string) 
flag.Func(<i>name</i>, <i>usage</i>, <i>fn</i>)|<b>Flag function</b> that defines a flag with the specified name and usage string. Each time the flag is seen, fn is called with the value of the flag. If fn returns a non-nil error, it will be treated as a flag value parsing error. ||func Func(name, usage string, fn func(string) error) 
flag.Int(<i>name</i>, <i>value</i>, <i>usage</i>)|<b>Flag function</b> that defines an int flag with specified name, default value, and usage string. The return value is the address of an int variable that stores the value of the flag. ||func Int(name string, value int, usage string) *int 
flag.Int64(<i>name</i>, <i>value</i>, <i>usage</i>)|<b>Flag function</b> that defines an int64 flag with specified name, default value, and usage string. The return value is the address of an int64 variable that stores the value of the flag. ||func Int64(name string, value int64, usage string) *int64 
flag.Int64Var(<i>p</i>, <i>name</i>, <i>value</i>, <i>usage</i>)|<b>Flag function</b> that defines an int64 flag with specified name, default value, and usage string. The argument p points to an int64 variable in which to store the value of the flag. ||func Int64Var(p *int64, name string, value int64, usage string) 
flag.IntVar(<i>p</i>, <i>name</i>, <i>value</i>, <i>usage</i>)|<b>Flag function</b> that defines an int flag with specified name, default value, and usage string. The argument p points to an int variable in which to store the value of the flag. ||func IntVar(p *int, name string, value int, usage string) 
flag.NArg(<i></i>)|<b>Flag function</b> that is the number of arguments remaining after flags have been processed. ||func NArg() int 
flag.NFlag(<i></i>)|<b>Flag function</b> that returns the number of command-line flags that have been set. ||func NFlag() int 
flag.Parse(<i></i>)|<b>Flag function</b> that parses the command-line flags from os.Args[1:]. Must be called after all flags are defined and before flags are accessed by the program. ||func Parse() 
flag.Parsed(<i></i>)|<b>Flag function</b> that reports whether the command-line flags have been parsed. ||func Parsed() bool 
flag.PrintDefaults(<i></i>)|<b>Flag function</b> that prints, to standard error unless configured otherwise, a usage message showing the default settings of all defined command-line flags. For an integer valued flag x, the default output has the form ||func PrintDefaults() 
flag.Set(<i>name</i>, <i>value</i>)|<b>Flag function</b> that sets the value of the named command-line flag. ||func Set(name, value string) error 
flag.String(<i>name</i>, <i>value</i>, <i>usage</i>)|<b>Flag function</b> that defines a string flag with specified name, default value, and usage string. The return value is the address of a string variable that stores the value of the flag. ||func String(name string, value string, usage string) *string 
flag.StringVar(<i>p</i>, <i>name</i>, <i>value</i>, <i>usage</i>)|<b>Flag function</b> that defines a string flag with specified name, default value, and usage string. The argument p points to a string variable in which to store the value of the flag. ||func StringVar(p *string, name string, value string, usage string) 
flag.TextVar(<i>p</i>, <i>name</i>, <i>value</i>, <i>usage</i>)|<b>Flag function</b> that defines a flag with a specified name, default value, and usage string. The argument p must be a pointer to a variable that will hold the value of the flag, and p must implement encoding.TextUnmarshaler. If the flag is used, the flag value will be passed to p's UnmarshalText method. The type of the default value must be the same as the type of p. ||func TextVar(p encoding.TextUnmarshaler, name string, value encoding.TextMarshaler, usage string) 
flag.Uint(<i>name</i>, <i>value</i>, <i>usage</i>)|<b>Flag function</b> that defines a uint flag with specified name, default value, and usage string. The return value is the address of a uint variable that stores the value of the flag. ||func Uint(name string, value uint, usage string) *uint 
flag.Uint64(<i>name</i>, <i>value</i>, <i>usage</i>)|<b>Flag function</b> that defines a uint64 flag with specified name, default value, and usage string. The return value is the address of a uint64 variable that stores the value of the flag. ||func Uint64(name string, value uint64, usage string) *uint64 
flag.Uint64Var(<i>p</i>, <i>name</i>, <i>value</i>, <i>usage</i>)|<b>Flag function</b> that defines a uint64 flag with specified name, default value, and usage string. The argument p points to a uint64 variable in which to store the value of the flag. ||func Uint64Var(p *uint64, name string, value uint64, usage string) 
flag.UintVar(<i>p</i>, <i>name</i>, <i>value</i>, <i>usage</i>)|<b>Flag function</b> that defines a uint flag with specified name, default value, and usage string. The argument p points to a uint variable in which to store the value of the flag. ||func UintVar(p *uint, name string, value uint, usage string) 
flag.UnquoteUsage(<i>flag</i>)|<b>Flag function</b> that extracts a back-quoted name from the usage string for a flag and returns it and the un-quoted usage. Given "a `name` to show" it returns ("name", "a name to show"). If there are no back quotes, the name is an educated guess of the type of the flag's value, or the empty string if the flag is boolean. ||func UnquoteUsage(flag *Flag) (name string, usage string) 
flag.Var(<i>value</i>, <i>name</i>, <i>usage</i>)|<b>Flag function</b> that defines a flag with the specified name and usage string. The type and value of the flag are represented by the first argument, of type Value, which typically holds a user-defined implementation of Value. For instance, the caller could create a flag that turns a comma-separated string into a slice of strings by giving the slice the methods of Value; in particular, Set would decompose the comma-separated string into the slice. ||func Var(value Value, name string, usage string) 
flag.Visit(<i>fn</i>)|<b>Flag function</b> that visits the command-line flags in lexicographical order, calling fn for each. It visits only those flags that have been set. ||func Visit(fn func(*Flag)) 
flag.VisitAll(<i>fn</i>)|<b>Flag function</b> that visits the command-line flags in lexicographical order, calling fn for each. It visits all flags, even those not set. ||func VisitAll(fn func(*Flag)) 
flag.Lookup(<i>name</i>)|<b>Flag function</b> that returns the Flag structure of the named command-line flag, returning nil if none exists. ||func Lookup(name string) *Flag 
flag.NewFlagSet(<i>name</i>, <i>errorHandling</i>)|<b>Flag function</b> that returns a new, empty flag set with the specified name and error handling property. If the name is not empty, it will be printed in the default usage message and in error messages. ||func NewFlagSet(name string, errorHandling ErrorHandling) *FlagSet 
